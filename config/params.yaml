random_search:
  class: RandomizedSearchCV
  module: sklearn.model_selection
  params:
    cv: 5
    verbose: 5
    n_jobs: -1
    n_iter: 20
    random_state: 42

model_selection:

  RandomForest:
    module: sklearn.ensemble
    class: RandomForestRegressor
    params:
      random_state: 42
    search_param_distributions:
      n_estimators: [100, 200, 300]
      max_depth: [null, 10, 20, 30]
      min_samples_split: [2, 5, 10]
      min_samples_leaf: [1, 2, 4]
      max_features: ["auto", "sqrt", "log2"]

  ExtraTrees:
    module: sklearn.ensemble
    class: ExtraTreesRegressor
    params:
      random_state: 42
    search_param_distributions:
      n_estimators: [100, 200, 300]
      max_depth: [null, 10, 20, 30]
      min_samples_split: [2, 5, 10]
      min_samples_leaf: [1, 2, 4]
      max_features: ["auto", "sqrt", "log2"]

  GradientBoosting:
    module: sklearn.ensemble
    class: GradientBoostingRegressor
    params:
      random_state: 42
    search_param_distributions:
      n_estimators: [100, 200, 300]
      learning_rate: [0.05, 0.1, 0.2]
      max_depth: [3, 4, 5]
      subsample: [0.8, 1.0]

  XGB:
    module: xgboost
    class: XGBRegressor
    params:
      random_state: 42
      verbosity: 0
    search_param_distributions:
      n_estimators: [200, 400, 600]
      learning_rate: [0.05, 0.1, 0.2]
      max_depth: [3, 5, 7]
      colsample_bytree: [0.8, 1.0]
      subsample: [0.8, 1.0]

  LGBM:
    module: lightgbm
    class: LGBMRegressor
    params:
      random_state: 42
    search_param_distributions:
      n_estimators: [200, 400, 600]
      learning_rate: [0.05, 0.1, 0.2]
      num_leaves: [31, 50, 100]
      subsample: [0.8, 1.0]
      colsample_bytree: [0.8, 1.0]

  CatBoost:
    module: catboost
    class: CatBoostRegressor
    params:
      random_state: 42
      verbose: 0
    search_param_distributions:
      iterations: [300, 500, 700]
      depth: [4, 6, 8]
      learning_rate: [0.03, 0.05, 0.1]
      l2_leaf_reg: [3, 5, 7]

ensemble_models:

  VotingRegressor:
    module: sklearn.ensemble
    class: VotingRegressor
    estimators:
      - ['xgb', XGB]
      - ['cat', CatBoost]
      - ['rf', RandomForest]

  StackingRegressor:
    module: sklearn.ensemble
    class: StackingRegressor
    estimators:
      - ['xgb', XGB]
      - ['cat', CatBoost]
      - ['rf', RandomForest]
    final_estimator:
      module: sklearn.linear_model
      class: LinearRegression
      params: {}
